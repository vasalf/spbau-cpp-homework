Задание предполагает создание приложения для хранения информации о сотрудниках
социально ориентированной, молодой, динамично развивающейся компании "Po & Cо".
Приложение позволяет просматривать существующий штат, состоящий из
разработчиков и продавцов, и добавлять новых членов в дружный коллектив.

При выполнении задания нужно учесть следующee:

0. Необходимо использовать ввод/вывод в стиле C++ (из/в файл/терминал).

1. Необходимо реализовать классы для хранения информации о сотрудниках
(в _бинарных_ файлах) с разными должностями:
Developer - разработчик, SalesManager - продавец.
Так как компания амбициозная, в будущем, возможно, будут добавлены новые
должности.

2. Интерфейс и частичная реализация классов определены в include/employees.h.
Требуется доработать интерфейс (employees.h) и реализацию (employees.cpp).

Не забудьте:
* придумать базовый класс Employee для сотрудника;
* добавить/запретить конструкторы, деструкторы,
  конструкторы копирования и операторы присваивания,
  если это необходимо;
* переопределить операторы ввода/вывода;
* добавить virtual куда нужно.
* добавить friend куда нужно.

3. Интерфейс приложения
Запуск: ./empl_db

В процессе работы программа хранит в памяти список сотрудников,
работать с которым можно при помощи следующих команд:
* load <file-name> - добавить в текущий список данные из файла (см. 3.1)
* list - вывести текущий список сотрудников (см. 3.3)
* add <args>* - добавить сотрудника (см. 3.2)
* save <file-name> - сохранить текущий список сотрудников в файл (см. 3.1)
* exit - завершение работы приложения

Предполагается, что все входные данные и их формат корректны.

3.1. Формат файла с информацией о сотрудниках

Данные о сотрудниках хранятся в бинарном формате:

<число сотрудников, int32><сотрудник 1>...<coтрудник N>

Набор полей, соответствующей записи о сотруднике, определяется его типом.
Предлагается дополнительно хранить тип в виде кода.

Записи имеют следующий формат:
* Developer
<тип := 1, int32><имя, c-string><оклад, int32><наличие премии, bool>
* SalesManager
<тип := 2, int32><имя, c-string><оклад, int32><совершено продаж, int32><выручка с одной продажи, int32>

3.2. Формат ввода информации о сотруднике

Соответствует формату хранения. Примеры:
* Developer: 1 Billy 1000 1
* SalesManager: 2 Joe 100 20 300

3.3. Формат вывода данных в терминал

1. <Должность>
<информация о сотруднике 1>
...
N. <Должность>
<информация о сотруднике N>
== Total salary: <суммарная заработная плата>

4. Пример работы программы

> ./empl_db
add 2 Joe 100 20 300
add 1 Billy 1000 1
list
1. Sales Manager
Name: Joe
Base Salary: 100
Sold items: 20
Item price: 300
2. Developer
Name: Billy
Base Salary: 1000
Has bonus: +
== Total salary: 2160

save example.edb
add 1 Bobby 500 0
load example.edb
list
1. Sales Manager
Name: Joe
Base Salary: 100
Sold items: 20
Item price: 300
2. Developer
Name: Billy
Base Salary: 1000
Has bonus: +
3. Developer
Name: Bobby
Base Salary: 500
Has bonus: -
4. Sales Manager
Name: Joe
Base Salary: 100
Sold items: 20
Item price: 300
5. Developer
Name: Billy
Base Salary: 1000
Has bonus: +
== Total salary: 4820

save merged.edb
exit
> hexdump merged.edb
0000000 0005 0000 0002 0000 6f4a 0065 0064 0000
0000010 0014 0000 012c 0000 0001 0000 6942 6c6c
0000020 0079 03e8 0000 0101 0000 4200 626f 7962
0000030 f400 0001 0000 0002 0000 6f4a 0065 0064
0000040 0000 0014 0000 012c 0000 0001 0000 6942
0000050 6c6c 0079 03e8 0000 0001               
0000059